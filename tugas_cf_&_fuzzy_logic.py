# -*- coding: utf-8 -*-
"""Tugas CF & Fuzzy Logic

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oiDatG57wZv9Rshi1aTqQoxyLxYVvW2T
"""

gejala_user = {
    "demam": 0.2,
    "batuk": 0.5,
    "sakit_tenggorokan": 0.6,
    "pilek": 0.6,
    "Nyeri_otot": 0.5,
    "kelelahan": 0.7,
    "sakit_kepala": 0.4,
    "bersin": 0.6
}

pengetahuan = {
    "flu": {
        "demam": 0.8,
        "batuk": 0.7,
        "sakit_tenggorokan": 0.6,
        "pilek": 0.7,
        "Nyeri_otot": 0.6,
        "kelelahan": 0.8,
        "sakit_kepala": 0.5,
        "bersin": 0.6
    }
}

def hitung_cf(gejala_user, pengetahuan_pakar):
  cf_total = 0
  first = True
  for gejala, cf_user in gejala_user.items():
    if gejala in pengetahuan_pakar:
      cf_pakar = pengetahuan_pakar[gejala]
      cf = cf_user * cf_pakar
      if first:
        cf_total = cf
        first = False
      else:
        cf_total = cf_total + cf * (1 - cf_total)
  return cf_total

cf_flu = hitung_cf(gejala_user, pengetahuan["flu"])
print(f"CF diagnosis Flu: {cf_flu:.2f}")

"""**HASIL DIAGNOSIS DAN ANALISIS CF**
- Nilai akhir CF diagnosis flu adalah 0.97, yang berarti sistem memiliki tingkat keyakinan yang sangat tinggi bahwa pasien mengalami flu.

**PENJELESAN**
1. Banyak gejala yang relevan dengan flu diberikan oleh pengguna (misalnya: demam, pilek, kelelahan).
2. CF dari pengguna terhadap gejala-gejala tersebut cukup tinggi.
3. CF pakar untuk gejala-gejala tersebut juga besar, menunjukkan pentingnya gejala-gejala itu dalam diagnosis flu.
4. Dengan metode perhitungan CF kombinasi, nilai akhir mendekati 1 menunjukkan bahwa data sangat mendukung diagnosis flu.

**KESIMPULAN**
- Gejala yang dilaporkan oleh pasien sangat konsisten dengan flu.

"""

!pip install scikit-fuzzy

import numpy as np
import skfuzzy as fuzz
from skfuzzy import control as ctrl
import matplotlib.pyplot as plt

temperature = ctrl.Antecedent(np.arange(15, 41, 1), 'temperature')
humidity = ctrl.Antecedent(np.arange(20, 101, 1), 'humidity')

fan_speed = ctrl.Consequent(np.arange(0, 101, 1), 'fan_speed')

temperature['dingin'] = fuzz.trapmf(temperature.universe, [15, 15, 20, 24])
temperature['nyaman'] = fuzz.trimf(temperature.universe, [22, 26, 30])
temperature['panas'] = fuzz.trapmf(temperature.universe, [28, 32, 40, 40])

humidity['kering'] = fuzz.trapmf(humidity.universe, [20, 20, 30, 45])
humidity['normal'] = fuzz.trimf(humidity.universe, [35, 50, 65])
humidity['lembab'] = fuzz.trapmf(humidity.universe, [55, 70, 100, 100])

fan_speed['mati'] = fuzz.trimf(fan_speed.universe, [0, 0, 25])
fan_speed['rendah'] = fuzz.trimf(fan_speed.universe, [0, 25, 50])
fan_speed['sedang'] = fuzz.trimf(fan_speed.universe, [25, 50, 75])
fan_speed['tinggi'] = fuzz.trimf(fan_speed.universe, [50, 75, 100])
fan_speed['maksimal'] = fuzz.trimf(fan_speed.universe, [75, 100, 100])

temperature.view()
humidity.view()
fan_speed.view()

rule1 = ctrl.Rule(temperature['dingin'] & humidity['kering'], fan_speed['mati'])
rule2 = ctrl.Rule(temperature['dingin'] & humidity['normal'], fan_speed['mati'])
rule3 = ctrl.Rule(temperature['dingin'] & humidity['lembab'], fan_speed['rendah'])
rule4 = ctrl.Rule(temperature['nyaman'] & humidity['kering'], fan_speed['rendah'])
rule5 = ctrl.Rule(temperature['nyaman'] & humidity['normal'], fan_speed['sedang'])
rule6 = ctrl.Rule(temperature['nyaman'] & humidity['lembab'], fan_speed['tinggi'])
rule7 = ctrl.Rule(temperature['panas'] & humidity['kering'], fan_speed['tinggi'])
rule8 = ctrl.Rule(temperature['panas'] & humidity['normal'], fan_speed['tinggi'])
rule9 = ctrl.Rule(temperature['panas'] & humidity['lembab'], fan_speed['maksimal'])
rule10 = ctrl.Rule(temperature['dingin'] & humidity['kering'], fan_speed['mati'])
rule11 = ctrl.Rule(temperature['panas'] & humidity['kering'], fan_speed['sedang'])
rule12 = ctrl.Rule(temperature['dingin'] & humidity['normal'], fan_speed['rendah'])

ac_ctrl = ctrl.ControlSystem([rule1, rule2, rule3, rule4, rule5, rule6, rule7, rule8, rule9, rule10, rule11, rule12])
ac = ctrl.ControlSystemSimulation(ac_ctrl)

ac.input['temperature'] = 22
ac.input['humidity'] = 75

ac.compute()
print(f"Untuk suhu 22°C dan kelembaban 75%, kecepatan kipas AC: {ac.output['fan_speed']:.2f}%")

fan_speed.view(sim=ac)
plt.show()

"""**PENJELASAN**

Hasil Analisis Fuzzy Logic (Suhu = 22°C, Kelembaban = 75%)
- Suhu 22°C memiliki keanggotaan sebagian dalam kategori "dingin" dan sedikit di "nyaman".
- Kelembaban 75% termasuk kategori "lembab".
- Aturan yang aktif:
  - `dingin` & `lembab` → kecepatan kipas `rendah`
  - `nyaman` & `lembab` → kecepatan kipas `tinggi` (berkontribusi kecil)
- Hasil akhirnya adalah **kombinasi fuzzy** dari kedua aturan di atas.
- Kecepatan kipas keluar di rentang antara **rendah–sedang** (misalnya: 30–40%).

Ini menunjukkan bahwa fuzzy logic dapat menangani transisi nilai dengan halus dan memberikan respons yang proporsional terhadap perubahan suhu dan kelembaban.
"""